import discord
from discord.ext import commands, tasks
import requests
import asyncio
from datetime import datetime
import os
from dotenv import load_dotenv
import logging

# ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ logging
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('bot.log'),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)

load_dotenv()  # ‡πÇ‡∏´‡∏•‡∏î environment variables ‡∏à‡∏≤‡∏Å‡πÑ‡∏ü‡∏•‡πå .env

intents = discord.Intents.default()
intents.message_content = True

bot = commands.Bot(
    command_prefix='/',
    intents=intents,
    help_command=None
)

# ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤
ESP32_IP = os.getenv('ESP32_IP', "10.70.55.222")  # ‡πÉ‡∏ä‡πâ‡∏à‡∏≤‡∏Å environment variable ‡∏´‡∏£‡∏∑‡∏≠‡∏Ñ‡πà‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô
CHANNEL_ID = int(os.getenv('DISCORD_CHANNEL_ID', 1406180111358885928))
DISCORD_TOKEN = os.getenv('DISCORD_TOKEN')  # ‡∏ï‡πâ‡∏≠‡∏á‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡πÉ‡∏ô .env
HEARTBEAT_INTERVAL = int(os.getenv('HEARTBEAT_INTERVAL', 1))  # ‡∏ô‡∏≤‡∏ó‡∏µ

class ESP32ConnectionError(Exception):
    pass

async def check_esp32_connection():
    try:
        response = requests.get(f"http://{ESP32_IP}/ping", timeout=5)
        if response.status_code != 200:
            raise ESP32ConnectionError(f"HTTP Status: {response.status_code}")
        return True
    except requests.exceptions.RequestException as e:
        raise ESP32ConnectionError(f"Connection failed: {str(e)}")

async def send_command_to_esp32(ctx, command):
    try:
        response = requests.get(f"http://{ESP32_IP}/command?cmd={command}", timeout=10)
        response.raise_for_status()
        return response.json()
    except requests.exceptions.RequestException as e:
        logger.error(f"Error sending command {command}: {str(e)}")
        raise ESP32ConnectionError(f"‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏Å‡∏±‡∏ö ESP32 ‡πÑ‡∏î‡πâ: {str(e)}")
    except ValueError as e:
        logger.error(f"JSON decode error for command {command}: {str(e)}")
        raise ESP32ConnectionError("‡∏Å‡∏≤‡∏£‡∏ï‡∏≠‡∏ö‡∏™‡∏ô‡∏≠‡∏á‡∏à‡∏≤‡∏Å ESP32 ‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á")

async def get_esp32_status():
    try:
        response = requests.get(f"http://{ESP32_IP}/status", timeout=10)
        response.raise_for_status()
        return response.json()
    except requests.exceptions.RequestException as e:
        logger.error(f"Error getting status: {str(e)}")
        raise ESP32ConnectionError(f"‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏î‡∏∂‡∏á‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏à‡∏≤‡∏Å ESP32 ‡πÑ‡∏î‡πâ: {str(e)}")
    except ValueError as e:
        logger.error(f"JSON decode error for status: {str(e)}")
        raise ESP32ConnectionError("‡∏Å‡∏≤‡∏£‡∏ï‡∏≠‡∏ö‡∏™‡∏ô‡∏≠‡∏á‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏à‡∏≤‡∏Å ESP32 ‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á")

def create_embed(title, description, color):
    embed = discord.Embed(
        title=title,
        description=description,
        color=color,
        timestamp=datetime.now()
    )
    embed.set_footer(text="Smart Farm System")
    return embed

@bot.event
async def on_ready():
    logger.info(f'Bot logged in as {bot.user.name} (ID: {bot.user.id})')
    logger.info(f'Connected to ESP32 at {ESP32_IP}')
    logger.info(f'Monitoring channel ID: {CHANNEL_ID}')
    check_esp32_status.start()

@bot.command()
async def help(ctx):
    """‡πÅ‡∏™‡∏î‡∏á‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÑ‡∏î‡πâ"""
    embed = create_embed("üÜò ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î", "‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏£‡∏∞‡∏ö‡∏ö Smart Farm", 0x7289DA)
    
    commands_list = [
        ("/ping", "‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏Å‡∏±‡∏ö ESP32"),
        ("/on", "‡πÄ‡∏õ‡∏¥‡∏î‡∏£‡∏∞‡∏ö‡∏ö‡∏Ñ‡∏ß‡∏ö‡∏Ñ‡∏∏‡∏°‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥"),
        ("/off", "‡∏õ‡∏¥‡∏î‡∏£‡∏∞‡∏ö‡∏ö‡∏Ñ‡∏ß‡∏ö‡∏Ñ‡∏∏‡∏°‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥"),
        ("/status", "‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏£‡∏∞‡∏ö‡∏ö‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô"),
        ("/pump on/off", "‡∏Ñ‡∏ß‡∏ö‡∏Ñ‡∏∏‡∏°‡∏õ‡∏±‡πä‡∏°‡∏î‡πâ‡∏ß‡∏¢‡∏°‡∏∑‡∏≠"),
        ("/setmin [‡∏Ñ‡πà‡∏≤]", "‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ä‡∏∑‡πâ‡∏ô‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡πà‡∏≥"),
        ("/reboot", "‡∏£‡∏µ‡∏™‡∏ï‡∏≤‡∏£‡πå‡∏ó‡∏£‡∏∞‡∏ö‡∏ö ESP32"),
        ("/test", "‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏£‡∏∞‡∏ö‡∏ö‡∏û‡∏∑‡πâ‡∏ô‡∏ê‡∏≤‡∏ô"),
        ("/help", "‡πÅ‡∏™‡∏î‡∏á‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î")
    ]
    
    for cmd, desc in commands_list:
        embed.add_field(name=cmd, value=desc, inline=False)
    
    await ctx.send(embed=embed)

@bot.command()
async def ping(ctx):
    """‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ ESP32"""
    try:
        await check_esp32_connection()
        status_data = await get_esp32_status()
        
        embed = create_embed(
            "‚úÖ ESP32 ‡∏ï‡∏≠‡∏ö‡∏™‡∏ô‡∏≠‡∏á",
            "‡∏£‡∏∞‡∏ö‡∏ö ESP32 ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏õ‡∏Å‡∏ï‡∏¥‡πÅ‡∏•‡∏∞‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡πÑ‡∏î‡πâ‡∏î‡∏µ",
            0x00FF00
        )
        
        embed.add_field(name="IP Address", value=status_data.get('ip', 'N/A'), inline=False)
        embed.add_field(name="‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ WiFi", value="‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠" if status_data.get('wifi', False) else "‡∏ï‡∏±‡∏î‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠", inline=True)
        embed.add_field(name="‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ä‡∏∑‡πâ‡∏ô‡∏î‡∏¥‡∏ô", value=f"{status_data.get('moisture', 0)}%", inline=True)
        embed.add_field(name="‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏£‡∏∞‡∏ö‡∏ö", value="‡πÄ‡∏õ‡∏¥‡∏î" if status_data.get('enabled', False) else "‡∏õ‡∏¥‡∏î", inline=True)
        
        await ctx.send(embed=embed)
        
    except ESP32ConnectionError as e:
        embed = create_embed(
            "‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ ESP32",
            str(e),
            0xFF0000
        )
        await ctx.send(embed=embed)

@bot.command()
async def on(ctx):
    """‡πÄ‡∏õ‡∏¥‡∏î‡∏£‡∏∞‡∏ö‡∏ö‡∏Ñ‡∏ß‡∏ö‡∏Ñ‡∏∏‡∏°‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥"""
    try:
        data = await send_command_to_esp32(ctx, "on")
        status_data = await get_esp32_status()
        
        embed = create_embed(
            "‚úÖ ‡∏£‡∏∞‡∏ö‡∏ö‡∏ñ‡∏π‡∏Å‡πÄ‡∏õ‡∏¥‡∏î‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô",
            data['message'],
            0x00FF00
        )
        
        embed.add_field(name="‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ä‡∏∑‡πâ‡∏ô‡∏î‡∏¥‡∏ô", value=f"{status_data['moisture']}%", inline=True)
        embed.add_field(name="‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏õ‡∏±‡πä‡∏°", value="‡πÄ‡∏õ‡∏¥‡∏î" if status_data['pump'] else "‡∏õ‡∏¥‡∏î", inline=True)
        
        await ctx.send(embed=embed)
        
    except ESP32ConnectionError as e:
        embed = create_embed(
            "‚ö†Ô∏è ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î",
            str(e),
            0xFF0000
        )
        await ctx.send(embed=embed)

@bot.command()
async def off(ctx):
    """‡∏õ‡∏¥‡∏î‡∏£‡∏∞‡∏ö‡∏ö‡∏Ñ‡∏ß‡∏ö‡∏Ñ‡∏∏‡∏°‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥"""
    try:
        data = await send_command_to_esp32(ctx, "off")
        status_data = await get_esp32_status()
        
        embed = create_embed(
            "üî¥ ‡∏£‡∏∞‡∏ö‡∏ö‡∏ñ‡∏π‡∏Å‡∏õ‡∏¥‡∏î‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô",
            data['message'],
            0xFF0000
        )
        
        embed.add_field(name="‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ä‡∏∑‡πâ‡∏ô‡∏î‡∏¥‡∏ô", value=f"{status_data['moisture']}%", inline=True)
        embed.add_field(name="‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏õ‡∏±‡πä‡∏°", value="‡πÄ‡∏õ‡∏¥‡∏î" if status_data['pump'] else "‡∏õ‡∏¥‡∏î", inline=True)
        
        await ctx.send(embed=embed)
        
    except ESP32ConnectionError as e:
        embed = create_embed(
            "‚ö†Ô∏è ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î",
            str(e),
            0xFF0000
        )
        await ctx.send(embed=embed)

@bot.command()
async def status(ctx):
    """‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏£‡∏∞‡∏ö‡∏ö‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô"""
    try:
        status_data = await get_esp32_status()
        
        embed = create_embed(
            "üìä ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏£‡∏∞‡∏ö‡∏ö ESP32",
            "‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô‡∏à‡∏≤‡∏Å‡∏£‡∏∞‡∏ö‡∏ö Smart Farm",
            0x7289DA
        )
        
        embed.add_field(name="‡πÄ‡∏ß‡∏•‡∏≤", value=status_data['time'], inline=False)
        embed.add_field(name="‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ä‡∏∑‡πâ‡∏ô‡∏î‡∏¥‡∏ô", value=f"{status_data['moisture']}% ({status_data['moisture_status']})", inline=True)
        embed.add_field(name="‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏õ‡∏±‡πä‡∏°", value="‡πÄ‡∏õ‡∏¥‡∏î" if status_data['pump'] else "‡∏õ‡∏¥‡∏î", inline=True)
        embed.add_field(name="‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏£‡∏∞‡∏ö‡∏ö", value="‡πÄ‡∏õ‡∏¥‡∏î" if status_data['enabled'] else "‡∏õ‡∏¥‡∏î", inline=True)
        embed.add_field(name="WiFi", value="‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠" if status_data['wifi'] else "‡∏ï‡∏±‡∏î‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠", inline=True)
        embed.add_field(name="IP Address", value=status_data['ip'], inline=True)
        embed.add_field(name="Last Error", value=status_data.get('last_error', 'None'), inline=False)
        
        await ctx.send(embed=embed)
        
    except ESP32ConnectionError as e:
        embed = create_embed(
            "‚ö†Ô∏è ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î",
            str(e),
            0xFF0000
        )
        await ctx.send(embed=embed)

@bot.command()
async def pump(ctx, action: str = None):
    """‡∏Ñ‡∏ß‡∏ö‡∏Ñ‡∏∏‡∏°‡∏õ‡∏±‡πä‡∏°‡∏î‡πâ‡∏ß‡∏¢‡∏°‡∏∑‡∏≠: /pump on ‡∏´‡∏£‡∏∑‡∏≠ /pump off"""
    if action is None:
        embed = create_embed(
            "‚ùì ‡∏ß‡∏¥‡∏ò‡∏µ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô",
            "‡πÉ‡∏ä‡πâ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á: `/pump on` ‡∏´‡∏£‡∏∑‡∏≠ `/pump off`",
            0xFFFF00
        )
        await ctx.send(embed=embed)
        return
    
    if action.lower() not in ['on', 'off']:
        embed = create_embed(
            "‚ö†Ô∏è ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á",
            "‡πÉ‡∏ä‡πâ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á: `/pump on` ‡∏´‡∏£‡∏∑‡∏≠ `/pump off`",
            0xFF0000
        )
        await ctx.send(embed=embed)
        return
    
    try:
        old_status = await get_esp32_status()
        old_pump_status = old_status.get('pump', False)
        
        command = f"pump_{action.lower()}"
        data = await send_command_to_esp32(ctx, command)
        
        await asyncio.sleep(2)
        
        new_status = await get_esp32_status()
        new_pump_status = new_status.get('pump', False)
        
        if (action.lower() == 'on' and new_pump_status) or (action.lower() == 'off' and not new_pump_status):
            embed = create_embed(
                f"{'‚úÖ' if action.lower() == 'on' else 'üî¥'} ‡∏õ‡∏±‡πä‡∏°‡∏ñ‡∏π‡∏Å{'‡πÄ‡∏õ‡∏¥‡∏î' if action.lower() == 'on' else '‡∏õ‡∏¥‡∏î'}",
                data.get('message', f"‡∏õ‡∏±‡πä‡∏°‡∏ñ‡∏π‡∏Å{action.lower() == 'on' and '‡πÄ‡∏õ‡∏¥‡∏î' or '‡∏õ‡∏¥‡∏î'}‡∏î‡πâ‡∏ß‡∏¢‡∏°‡∏∑‡∏≠"),
                0x00FF00 if action.lower() == 'on' else 0xFF0000
            )
        else:
            embed = create_embed(
                "‚ö†Ô∏è ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à",
                f"‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ{'‡πÄ‡∏õ‡∏¥‡∏î' if action.lower() == 'on' else '‡∏õ‡∏¥‡∏î'}‡∏õ‡∏±‡πä‡∏°‡πÑ‡∏î‡πâ ‡πÇ‡∏õ‡∏£‡∏î‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á",
                0xFF0000
            )
        
        embed.add_field(name="‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏õ‡∏±‡πä‡∏° (‡∏Å‡πà‡∏≠‡∏ô)", value="‡πÄ‡∏õ‡∏¥‡∏î" if old_pump_status else "‡∏õ‡∏¥‡∏î", inline=True)
        embed.add_field(name="‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏õ‡∏±‡πä‡∏° (‡∏´‡∏•‡∏±‡∏á)", value="‡πÄ‡∏õ‡∏¥‡∏î" if new_pump_status else "‡∏õ‡∏¥‡∏î", inline=True)
        embed.add_field(name="‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ä‡∏∑‡πâ‡∏ô‡∏î‡∏¥‡∏ô", value=f"{new_status.get('moisture', 0)}%", inline=True)
        
        await ctx.send(embed=embed)
        
    except ESP32ConnectionError as e:
        embed = create_embed(
            "‚ö†Ô∏è ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î",
            str(e),
            0xFF0000
        )
        await ctx.send(embed=embed)

@bot.command()
async def setmin(ctx, min_moisture: int = None):
    """‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ä‡∏∑‡πâ‡∏ô‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡πà‡∏≥: /setmin 30"""
    if min_moisture is None:
        embed = create_embed(
            "‚ùì ‡∏ß‡∏¥‡∏ò‡∏µ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô",
            "‡πÉ‡∏ä‡πâ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á: `/setmin [‡∏Ñ‡πà‡∏≤‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ä‡∏∑‡πâ‡∏ô]` (‡πÄ‡∏ä‡πà‡∏ô `/setmin 30`)",
            0xFFFF00
        )
        await ctx.send(embed=embed)
        return
    
    if min_moisture < 0 or min_moisture > 100:
        embed = create_embed(
            "‚ö†Ô∏è ‡∏Ñ‡πà‡∏≤‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á",
            "‡∏Ñ‡πà‡∏≤‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ä‡∏∑‡πâ‡∏ô‡∏ï‡πâ‡∏≠‡∏á‡∏≠‡∏¢‡∏π‡πà‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á 0-100%",
            0xFF0000
        )
        await ctx.send(embed=embed)
        return
    
    try:
        command = f"set_min_moisture_{min_moisture}"
        data = await send_command_to_esp32(ctx, command)
        
        embed = create_embed(
            "‚úÖ ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ä‡∏∑‡πâ‡∏ô‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡πà‡∏≥",
            f"‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ä‡∏∑‡πâ‡∏ô‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡πà‡∏≥‡πÄ‡∏õ‡πá‡∏ô {min_moisture}%",
            0x00FF00
        )
        
        embed.add_field(name="‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°", value=data.get('message', '‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à'), inline=False)
        
        await ctx.send(embed=embed)
        
    except ESP32ConnectionError as e:
        embed = create_embed(
            "‚ö†Ô∏è ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î",
            str(e),
            0xFF0000
        )
        await ctx.send(embed=embed)

@bot.command()
async def test(ctx):
    """‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡πÅ‡∏•‡∏∞‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏û‡∏∑‡πâ‡∏ô‡∏ê‡∏≤‡∏ô"""
    try:
        embed = create_embed(
            "üß™ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏£‡∏∞‡∏ö‡∏ö...",
            "‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡πÅ‡∏•‡∏∞‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ï‡πà‡∏≤‡∏á‡πÜ",
            0xFFFF00
        )
        test_message = await ctx.send(embed=embed)
        
        connection_test = await check_esp32_connection()
        connection_status = "‚úÖ ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡πÑ‡∏î‡πâ" if connection_test else "‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠"
        
        try:
            status_data = await get_esp32_status()
            status_status = "‚úÖ ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏î‡πâ"
            moisture_value = status_data.get('moisture', 'N/A')
            pump_status = "‡πÄ‡∏õ‡∏¥‡∏î" if status_data.get('pump', False) else "‡∏õ‡∏¥‡∏î"
        except:
            status_status = "‚ùå ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ"
            moisture_value = "N/A"
            pump_status = "N/A"
        
        try:
            response = requests.get(f"http://{ESP32_IP}/ping", timeout=5)
            ping_status = "‚úÖ ‡∏ï‡∏≠‡∏ö‡∏™‡∏ô‡∏≠‡∏á ping" if response.status_code == 200 else f"‚ùå HTTP {response.status_code}"
        except:
            ping_status = "‚ùå ‡πÑ‡∏°‡πà‡∏ï‡∏≠‡∏ö‡∏™‡∏ô‡∏≠‡∏á ping"
        
        final_embed = create_embed(
            "‚úÖ ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏£‡∏∞‡∏ö‡∏ö‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô",
            "‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏£‡∏∞‡∏ö‡∏ö Smart Farm",
            0x00FF00 if connection_test else 0xFF0000
        )
        
        final_embed.add_field(name="‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠", value=connection_status, inline=False)
        final_embed.add_field(name="‡∏Å‡∏≤‡∏£‡∏î‡∏∂‡∏á‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞", value=status_status, inline=False)
        final_embed.add_field(name="Ping Test", value=ping_status, inline=False)
        final_embed.add_field(name="‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ä‡∏∑‡πâ‡∏ô‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô", value=f"{moisture_value}%", inline=True)
        final_embed.add_field(name="‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏õ‡∏±‡πä‡∏°", value=pump_status, inline=True)
        
        await test_message.edit(embed=final_embed)
        
    except Exception as e:
        embed = create_embed(
            "‚ö†Ô∏è ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö",
            str(e),
            0xFF0000
        )
        await ctx.send(embed=embed)

@bot.command()
async def reboot(ctx):
    """‡∏£‡∏µ‡∏™‡∏ï‡∏≤‡∏£‡πå‡∏ó‡∏£‡∏∞‡∏ö‡∏ö ESP32"""
    try:
        embed = create_embed(
            "üîÑ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏£‡∏µ‡∏™‡∏ï‡∏≤‡∏£‡πå‡∏ó‡∏£‡∏∞‡∏ö‡∏ö...",
            "‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏™‡∏±‡πà‡∏á‡∏£‡∏µ‡∏™‡∏ï‡∏≤‡∏£‡πå‡∏ó ESP32 ‡∏£‡∏∞‡∏ö‡∏ö‡∏à‡∏∞‡∏Å‡∏•‡∏±‡∏ö‡∏°‡∏≤‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÉ‡∏ô‡∏≠‡∏µ‡∏Å 30-60 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ",
            0xFFFF00
        )
        await ctx.send(embed=embed)
        
        requests.get(f"http://{ESP32_IP}/command?cmd=reboot", timeout=5)
        await asyncio.sleep(45)
        
        if await check_esp32_connection():
            final_embed = create_embed(
                "‚úÖ ‡∏£‡∏∞‡∏ö‡∏ö‡∏Å‡∏•‡∏±‡∏ö‡∏°‡∏≤‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡πÅ‡∏•‡πâ‡∏ß",
                "ESP32 ‡∏£‡∏µ‡∏™‡∏ï‡∏≤‡∏£‡πå‡∏ó‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à‡πÅ‡∏•‡∏∞‡∏Å‡∏•‡∏±‡∏ö‡∏°‡∏≤‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÑ‡∏î‡πâ‡πÅ‡∏•‡πâ‡∏ß",
                0x00FF00
            )
        else:
            final_embed = create_embed(
                "‚ö†Ô∏è ‡∏£‡∏∞‡∏ö‡∏ö‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏ï‡∏≠‡∏ö‡∏™‡∏ô‡∏≠‡∏á",
                "ESP32 ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏ï‡∏≠‡∏ö‡∏™‡∏ô‡∏≠‡∏á‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å‡∏£‡∏µ‡∏™‡∏ï‡∏≤‡∏£‡πå‡∏ó ‡∏≠‡∏≤‡∏à‡∏ï‡πâ‡∏≠‡∏á‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Æ‡∏≤‡∏£‡πå‡∏î‡πÅ‡∏ß‡∏£‡πå",
                0xFF0000
            )
        
        await ctx.send(embed=final_embed)
        
    except Exception as e:
        embed = create_embed(
            "‚ö†Ô∏è ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î",
            f"‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏£‡∏µ‡∏™‡∏ï‡∏≤‡∏£‡πå‡∏ó‡∏£‡∏∞‡∏ö‡∏ö‡πÑ‡∏î‡πâ: {str(e)}",
            0xFF0000
        )
        await ctx.send(embed=embed)

@tasks.loop(minutes=HEARTBEAT_INTERVAL)
async def check_esp32_status():
    channel = bot.get_channel(CHANNEL_ID)
    if channel is None:
        logger.error(f"Channel {CHANNEL_ID} not found!")
        return
    
    try:
        status_data = await get_esp32_status()
        
        embed = create_embed(
            "üíì ‡∏£‡∏∞‡∏ö‡∏ö‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏õ‡∏Å‡∏ï‡∏¥",
            "ESP32 ‡∏¢‡∏±‡∏á‡∏Ñ‡∏á‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏ï‡∏≤‡∏°‡∏õ‡∏Å‡∏ï‡∏¥",
            0x00FF00
        )
        
        embed.add_field(name="‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ä‡∏∑‡πâ‡∏ô‡∏î‡∏¥‡∏ô", value=f"{status_data['moisture']}%", inline=True)
        embed.add_field(name="‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏õ‡∏±‡πä‡∏°", value="‡πÄ‡∏õ‡∏¥‡∏î" if status_data['pump'] else "‡∏õ‡∏¥‡∏î", inline=True)
        embed.add_field(name="IP Address", value=status_data.get('ip', 'N/A'), inline=True)
        embed.add_field(name="Last Error", value=status_data.get('last_error', 'None'), inline=False)
        
        await channel.send(embed=embed)
        
    except ESP32ConnectionError as e:
        embed = create_embed(
            "‚ö†Ô∏è ‡∏£‡∏∞‡∏ö‡∏ö‡πÑ‡∏°‡πà‡∏ï‡∏≠‡∏ö‡∏™‡∏ô‡∏≠‡∏á",
            f"ESP32 ‡πÑ‡∏°‡πà‡∏ï‡∏≠‡∏ö‡∏™‡∏ô‡∏≠‡∏á‡∏ï‡πà‡∏≠‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö\n{str(e)}",
            0xFF0000
        )
        await channel.send(embed=embed)
        
        try:
            requests.get(f"http://{ESP32_IP}/command?cmd=reboot", timeout=5)
        except:
            pass

@check_esp32_status.before_loop
async def before_check_status():
    await bot.wait_until_ready()
    logger.info("Heartbeat monitor is ready")

if __name__ == "__main__":
    if not DISCORD_TOKEN:
        logger.error("Error: DISCORD_TOKEN not found in environment variables!")
    else:
        bot.run(DISCORD_TOKEN)