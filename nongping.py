import discord
from discord.ext import commands, tasks
import aiohttp
import asyncio
from datetime import datetime
import os
from dotenv import load_dotenv
import logging

# ‡πÇ‡∏´‡∏•‡∏î environment variables
load_dotenv()

# ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ logging ‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡∏†‡∏≤‡∏©‡∏≤‡πÑ‡∏ó‡∏¢
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('bot.log', encoding='utf-8'),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)

# ‡πÇ‡∏´‡∏•‡∏î‡∏Ñ‡πà‡∏≤‡∏à‡∏≤‡∏Å .env
ESP32_IP = os.getenv('ESP32_IP', '10.70.55.222')
DISCORD_CHANNEL_ID = int(os.getenv('DISCORD_CHANNEL_ID', 1406180111358885928))
DISCORD_TOKEN = os.getenv('DISCORD_TOKEN')
HEARTBEAT_INTERVAL = int(os.getenv('HEARTBEAT_INTERVAL', 1))

if not DISCORD_TOKEN:
    raise ValueError("DISCORD_TOKEN ‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÉ‡∏ô‡πÑ‡∏ü‡∏•‡πå .env")

intents = discord.Intents.default()
intents.message_content = True

bot = commands.Bot(
    command_prefix='/',
    intents=intents,
    help_command=None
)

class ESP32ConnectionError(Exception):
    """Custom exception ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö ESP32"""
    pass

async def get_session():
    return aiohttp.ClientSession(timeout=aiohttp.ClientTimeout(total=10))

async def check_esp32_connection():
    """‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ ESP32"""
    async with await get_session() as session:
        try:
            async with session.get(f"http://{ESP32_IP}/ping") as response:
                if response.status != 200:
                    text = await response.text()
                    raise ESP32ConnectionError(f"HTTP {response.status}: {text[:100]}")
                return True
        except Exception as e:
            raise ESP32ConnectionError(f"‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠: {type(e).__name__}")

async def get_esp32_status():
    """‡∏î‡∏∂‡∏á‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏à‡∏≤‡∏Å ESP32"""
    async with await get_session() as session:
        try:
            async with session.get(f"http://{ESP32_IP}/status", timeout=10) as response:
                if response.status != 200:
                    text = await response.text()
                    raise ESP32ConnectionError(f"HTTP {response.status}: {text[:100]}")
                return await response.json()
        except Exception as e:
            logger.error(f"Error in get_esp32_status: {e}")
            raise ESP32ConnectionError(f"‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ: {type(e).__name__}")

def create_embed(title: str, description: str, color: int):
    """‡∏™‡∏£‡πâ‡∏≤‡∏á embed ‡∏û‡∏£‡πâ‡∏≠‡∏° footer"""
    embed = discord.Embed(
        title=title,
        description=description,
        color=color,
        timestamp=datetime.now()
    )
    embed.set_footer(text="Smart Farm System")
    return embed

@bot.event
async def on_ready():
    logger.info(f'Bot logged in as {bot.user.name} (ID: {bot.user.id})')
    logger.info(f'ESP32 IP: {ESP32_IP}')
    logger.info(f'Monitoring channel ID: {DISCORD_CHANNEL_ID}')
    check_esp32_status.start()

@bot.command()
async def help(ctx):
    """‡πÅ‡∏™‡∏î‡∏á‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î"""
    embed = create_embed("üÜò ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î", "‡∏£‡∏∞‡∏ö‡∏ö Smart Farm ‡∏ö‡∏ô Discord", 0x7289DA)
    
    commands_list = [
        ("/ping", "‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ ESP32"),
        ("/on", "‡πÄ‡∏õ‡∏¥‡∏î‡∏£‡∏∞‡∏ö‡∏ö‡∏Ñ‡∏ß‡∏ö‡∏Ñ‡∏∏‡∏°‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥"),
        ("/off", "‡∏õ‡∏¥‡∏î‡∏£‡∏∞‡∏ö‡∏ö‡∏Ñ‡∏ß‡∏ö‡∏Ñ‡∏∏‡∏°‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥"),
        ("/status", "‡∏î‡∏π‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô"),
        ("/pump on/off", "‡∏Ñ‡∏ß‡∏ö‡∏Ñ‡∏∏‡∏°‡∏õ‡∏±‡πä‡∏°‡∏î‡πâ‡∏ß‡∏¢‡∏°‡∏∑‡∏≠"),
        ("/reboot", "‡∏£‡∏µ‡∏™‡∏ï‡∏≤‡∏£‡πå‡∏ó ESP32"),
        ("/help", "‡πÅ‡∏™‡∏î‡∏á‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ô‡∏µ‡πâ")
    ]
    
    for cmd, desc in commands_list:
        embed.add_field(name=cmd, value=desc, inline=False)
    
    await ctx.send(embed=embed)

@bot.command()
async def ping(ctx):
    """‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠"""
    try:
        await check_esp32_connection()
        status = await get_esp32_status()
        embed = create_embed("‚úÖ ESP32 ‡∏≠‡∏≠‡∏ô‡πÑ‡∏•‡∏ô‡πå", "‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à", 0x00FF00)
        embed.add_field(name="IP", value=status.get('ip', 'N/A'), inline=True)
        embed.add_field(name="‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ä‡∏∑‡πâ‡∏ô", value=f"{status.get('moisture', 0)}%", inline=True)
        embed.add_field(name="‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞", value="‡πÄ‡∏õ‡∏¥‡∏î" if status.get('enabled') else "‡∏õ‡∏¥‡∏î", inline=True)
    except ESP32ConnectionError as e:
        embed = create_embed("‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠", str(e), 0xFF0000)
    await ctx.send(embed=embed)

@bot.command()
async def on(ctx):
    """‡πÄ‡∏õ‡∏¥‡∏î‡∏£‡∏∞‡∏ö‡∏ö‡∏Ñ‡∏ß‡∏ö‡∏Ñ‡∏∏‡∏°‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥"""
    try:
        async with await get_session() as session:
            async with session.get(f"http://{ESP32_IP}/command?cmd=on") as response:
                if response.status != 200:
                    raise ESP32ConnectionError("‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏õ‡∏¥‡∏î‡∏£‡∏∞‡∏ö‡∏ö‡πÑ‡∏î‡πâ")
                data = await response.json()
        
        status = await get_esp32_status()
        embed = create_embed("‚úÖ ‡∏£‡∏∞‡∏ö‡∏ö‡πÄ‡∏õ‡∏¥‡∏î", data.get('message', '‡∏£‡∏∞‡∏ö‡∏ö‡πÄ‡∏õ‡∏¥‡∏î‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢'), 0x00FF00)
        embed.add_field(name="‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ä‡∏∑‡πâ‡∏ô", value=f"{status['moisture']}%", inline=True)
        embed.add_field(name="‡∏õ‡∏±‡πä‡∏°", value="‡πÄ‡∏õ‡∏¥‡∏î" if status['pump'] else "‡∏õ‡∏¥‡∏î", inline=True)
    except ESP32ConnectionError as e:
        embed = create_embed("‚ö†Ô∏è ‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î", "‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏õ‡∏¥‡∏î‡∏£‡∏∞‡∏ö‡∏ö‡πÑ‡∏î‡πâ", 0xFF0000)
    await ctx.send(embed=embed)

@bot.command()
async def off(ctx):
    """‡∏õ‡∏¥‡∏î‡∏£‡∏∞‡∏ö‡∏ö‡∏Ñ‡∏ß‡∏ö‡∏Ñ‡∏∏‡∏°‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥"""
    try:
        async with await get_session() as session:
            async with session.get(f"http://{ESP32_IP}/command?cmd=off") as response:
                if response.status != 200:
                    raise ESP32ConnectionError("‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏õ‡∏¥‡∏î‡∏£‡∏∞‡∏ö‡∏ö‡πÑ‡∏î‡πâ")
                data = await response.json()
        
        status = await get_esp32_status()
        embed = create_embed("üî¥ ‡∏£‡∏∞‡∏ö‡∏ö‡∏õ‡∏¥‡∏î", data.get('message', '‡∏£‡∏∞‡∏ö‡∏ö‡∏õ‡∏¥‡∏î‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢'), 0xFF0000)
        embed.add_field(name="‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ä‡∏∑‡πâ‡∏ô", value=f"{status['moisture']}%", inline=True)
        embed.add_field(name="‡∏õ‡∏±‡πä‡∏°", value="‡πÄ‡∏õ‡∏¥‡∏î" if status['pump'] else "‡∏õ‡∏¥‡∏î", inline=True)
    except ESP32ConnectionError as e:
        embed = create_embed("‚ö†Ô∏è ‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î", "‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏õ‡∏¥‡∏î‡∏£‡∏∞‡∏ö‡∏ö‡πÑ‡∏î‡πâ", 0xFF0000)
    await ctx.send(embed=embed)

@bot.command()
async def status(ctx):
    """‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏£‡∏∞‡∏ö‡∏ö‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô"""
    try:
        status_data = await get_esp32_status()
        embed = create_embed("üìä ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏£‡∏∞‡∏ö‡∏ö", "‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î", 0x7289DA)
        embed.add_field(name="‡πÄ‡∏ß‡∏•‡∏≤", value=status_data['time'], inline=False)
        embed.add_field(name="‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ä‡∏∑‡πâ‡∏ô", value=f"{status_data['moisture']}%", inline=True)
        embed.add_field(name="‡∏õ‡∏±‡πä‡∏°", value="‡πÄ‡∏õ‡∏¥‡∏î" if status_data['pump'] else "‡∏õ‡∏¥‡∏î", inline=True)
        embed.add_field(name="‡∏£‡∏∞‡∏ö‡∏ö", value="‡πÄ‡∏õ‡∏¥‡∏î" if status_data['enabled'] else "‡∏õ‡∏¥‡∏î", inline=True)
        embed.add_field(name="WiFi", value="‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠" if status_data['wifi'] else "‡∏ï‡∏±‡∏î‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠", inline=True)
        embed.add_field(name="IP", value=status_data['ip'], inline=True)
        embed.add_field(name="Error", value=status_data.get('last_error', 'None'), inline=False)
    except ESP32ConnectionError as e:
        embed = create_embed("‚ö†Ô∏è ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ", str(e), 0xFF0000)
    await ctx.send(embed=embed)

@bot.command()
async def pump(ctx, action: str = None):
    """‡∏Ñ‡∏ß‡∏ö‡∏Ñ‡∏∏‡∏°‡∏õ‡∏±‡πä‡∏°‡∏î‡πâ‡∏ß‡∏¢‡∏°‡∏∑‡∏≠: /pump on ‡∏´‡∏£‡∏∑‡∏≠ /pump off"""
    if action is None:
        embed = create_embed("‚ùì ‡∏ß‡∏¥‡∏ò‡∏µ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô", "‡πÉ‡∏ä‡πâ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á: `/pump on` ‡∏´‡∏£‡∏∑‡∏≠ `/pump off`", 0xFFFF00)
        await ctx.send(embed=embed)
        return
    
    if action.lower() not in ['on', 'off']:
        embed = create_embed("‚ö†Ô∏è ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á", "‡πÉ‡∏ä‡πâ: `/pump on` ‡∏´‡∏£‡∏∑‡∏≠ `/pump off`", 0xFF0000)
        await ctx.send(embed=embed)
        return
    
    command = f"pump_{action.lower()}"
    try:
        async with await get_session() as session:
            async with session.get(f"http://{ESP32_IP}/command?cmd={command}") as response:
                if response.status != 200:
                    raise ESP32ConnectionError("‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏Ñ‡∏ß‡∏ö‡∏Ñ‡∏∏‡∏°‡∏õ‡∏±‡πä‡∏°‡πÑ‡∏î‡πâ")
                data = await response.json()
        
        status = await get_esp32_status()
        embed = create_embed(
            f"{'‚úÖ' if action.lower() == 'on' else 'üî¥'} ‡∏õ‡∏±‡πä‡∏°‡∏ñ‡∏π‡∏Å{action.lower() == 'on' and '‡πÄ‡∏õ‡∏¥‡∏î' or '‡∏õ‡∏¥‡∏î'}",
            data.get('message', f"‡∏õ‡∏±‡πä‡∏°‡∏ñ‡∏π‡∏Å{action.lower() == 'on' and '‡πÄ‡∏õ‡∏¥‡∏î' or '‡∏õ‡∏¥‡∏î'}‡πÅ‡∏•‡πâ‡∏ß"),
            0x00FF00 if action.lower() == 'on' else 0xFF0000
        )
        embed.add_field(name="‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏õ‡∏±‡πä‡∏°", value="‡πÄ‡∏õ‡∏¥‡∏î" if status['pump'] else "‡∏õ‡∏¥‡∏î", inline=True)
        embed.add_field(name="‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ä‡∏∑‡πâ‡∏ô", value=f"{status['moisture']}%", inline=True)
    except ESP32ConnectionError as e:
        embed = create_embed("‚ö†Ô∏è ‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î", "‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏Ñ‡∏ß‡∏ö‡∏Ñ‡∏∏‡∏°‡∏õ‡∏±‡πä‡∏°‡πÑ‡∏î‡πâ", 0xFF0000)
    await ctx.send(embed=embed)

@bot.command()
async def reboot(ctx):
    """‡∏£‡∏µ‡∏™‡∏ï‡∏≤‡∏£‡πå‡∏ó ESP32"""
    try:
        embed = create_embed("üîÑ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏£‡∏µ‡∏™‡∏ï‡∏≤‡∏£‡πå‡∏ó...", "‡∏™‡∏±‡πà‡∏á‡∏£‡∏µ‡∏™‡∏ï‡∏≤‡∏£‡πå‡∏ó ESP32", 0xFFFF00)
        await ctx.send(embed=embed)
        
        async with await get_session() as session:
            async with session.get(f"http://{ESP32_IP}/command?cmd=reboot", timeout=5) as response:
                pass  # ‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏£‡∏≠ response
        
        await asyncio.sleep(3)
        
        try:
            await asyncio.sleep(30)
            if await check_esp32_connection():
                final_embed = create_embed("‚úÖ ‡∏Å‡∏•‡∏±‡∏ö‡∏°‡∏≤‡∏≠‡∏≠‡∏ô‡πÑ‡∏•‡∏ô‡πå‡πÅ‡∏•‡πâ‡∏ß", "ESP32 ‡∏£‡∏µ‡∏™‡∏ï‡∏≤‡∏£‡πå‡∏ó‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à", 0x00FF00)
            else:
                final_embed = create_embed("‚ö†Ô∏è ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏ï‡∏≠‡∏ö‡∏™‡∏ô‡∏≠‡∏á", "‡∏≠‡∏≤‡∏à‡∏ï‡πâ‡∏≠‡∏á‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Æ‡∏≤‡∏£‡πå‡∏î‡πÅ‡∏ß‡∏£‡πå", 0xFF0000)
            await ctx.send(embed=final_embed)
        except:
            pass
            
    except Exception as e:
        embed = create_embed("‚ö†Ô∏è ‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î", f"‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏£‡∏µ‡∏™‡∏ï‡∏≤‡∏£‡πå‡∏ó‡πÑ‡∏î‡πâ: {str(e)}", 0xFF0000)
        await ctx.send(embed=embed)

@tasks.loop(minutes=HEARTBEAT_INTERVAL)
async def check_esp32_status():
    channel = bot.get_channel(DISCORD_CHANNEL_ID)
    if not channel:
        logger.error(f"Channel {DISCORD_CHANNEL_ID} ‡πÑ‡∏°‡πà‡∏û‡∏ö!")
        return

    try:
        status = await get_esp32_status()
        embed = create_embed("üíì ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏õ‡∏Å‡∏ï‡∏¥", "ESP32 ‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡πÑ‡∏î‡πâ‡∏î‡∏µ", 0x00FF00)
        embed.add_field(name="‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ä‡∏∑‡πâ‡∏ô", value=f"{status['moisture']}%", inline=True)
        embed.add_field(name="‡∏õ‡∏±‡πä‡∏°", value="‡πÄ‡∏õ‡∏¥‡∏î" if status['pump'] else "‡∏õ‡∏¥‡∏î", inline=True)
        embed.add_field(name="IP", value=status.get('ip', 'N/A'), inline=True)
        embed.add_field(name="Error", value=status.get('last_error', 'None'), inline=False)
        await channel.send(embed=embed)
    except ESP32ConnectionError as e:
        embed = create_embed("‚ö†Ô∏è ESP32 ‡πÑ‡∏°‡πà‡∏ï‡∏≠‡∏ö‡∏™‡∏ô‡∏≠‡∏á", f"```{str(e)}```", 0xFF0000)
        await channel.send(embed=embed)
        logger.error(f"ESP32 not responding: {e}")

@check_esp32_status.before_loop
async def before_check_status():
    await bot.wait_until_ready()
    logger.info("Heartbeat monitor ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ó‡∏≥‡∏á‡∏≤‡∏ô")

# ‡πÄ‡∏£‡∏¥‡πà‡∏° Bot
if __name__ == "__main__":
    bot.run(DISCORD_TOKEN)